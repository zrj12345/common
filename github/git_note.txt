1.git的配置文件
	存储在三个不同的位置
	1./etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system 选项的 git config 时，它会从此文件读写配置变量。
	2.~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 --global 选项让 Git 读写此文件
	3.当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。
	
	Note:
		每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量
		
	command:
		git config --system 读取的是/etc/gitconfig文件
		git config --global 读取的是当前用户的git的配置文件
		
		编辑用户信息:
			git config --system user.name "zhangrj"
			git config --system user.email "qzhangrongjie@163.com"
		
		文本编辑器:
			git config --global core.editor  emacs         --> 默认是vim 这个配置不是必须的
			
			打开/etc/gitconfig
			[user]
				name = zhangrj
				email = qzhangrongjie@163.com
				/etc/gitconfig默认可能是没有的，没有的话执行
				git config --system -l是会报错的。
			
			Note:
				当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置
		
			git config --system   --get user.name 
			git config --global   --get user.name 
			git config user.name
			git config --list            --列出所有 Git 当时能找到的配置
			
		commit.template         ---> 当你提交的时候， Git 会使用该文件的内容作为提交的默认信息
			git config --global commit.template ~/.gitmessage.txt
			
				~/.gitmessage.txt:
					subject line

					what happened

					[ticket: X]
		
		core.pager            --> 配置项指定 Git 运行诸如 log 和 diff 等命令所使用的分页器。默认用的是 less
			git config --global core.pager ''
			git config --global core.pager 'more'
			
		core.excludesfile     --> 忽略文件
			git config --global core.excludesfile ~/.gitignore_global
			
		help.autocorrect      -->  会尝试猜测你的意图，但是它不会越俎代庖
			git config --global help.autocorrect  1
			
			$git chekcout master
			警告：您运行一个不存在的 Git 命令 'chekcout'。继续执行假定您要要运行的
			是 'checkout'
			在 0.1 秒钟后自动运行...
			
		color.ui   --> 会自动着色大部分输出内容
			git config --global color.ui false   --> 默认值是auto
			git config --global color.ui true    
			
			
2.获取Git仓库   --> 两种方法
	A.是在现有项目或目录下导入所有文件到 Git 中
	B.从一个服务器克隆一个现有的 Git 仓库
			
		A:如果你打算使用 Git 来对现有的项目进行管理，你只需要进入该项目目录并输入
			git init
			
			Note:如果目录非空，还需要执行
				git add 你要跟踪的文件       --> 对指定文件的跟踪
				git commit                   --> 提交
				
				示例:
					git add *.c
					git add LICENSE
					git commit -m 'initial project version'
			
		B.从一个服务器克隆一个现有的 Git 仓库		
			使用
				git clone [url]
			示例:
				git clone https://github.com/libgit2/libgit2
				git clone https://github.com/libgit2/libgit2 mylibgit  --> 自定义仓库名称
					
			
3.提交，暂存，状态，移除，移动,提交历史
	git  add   --> 添加内容到下一次提交中
	git commit --> 提交文件到版本库
		会启动文本编辑器以便输入本次提交的说明
			$EDITOR 所指定的软件，
			git config --global core.editor 指定的软件
	git commit -m 提交的说明
	git commit -a 跳过使用暂存区域的方式，自动把所有已经跟踪过的文件暂存起来一并提交
	 
	git status -s 
		M  -->  修改过的文件
		?? -->  新添加的未跟踪文件
		A  -->  新添加到暂存区中的文件
		MM --> 	表示修改文件并且git add 之后又修改文件
			
		忽略文件:  -->　编写.gitignore 文件，忽略不需要纳入git管理的文件。
			示例:
				*.[oa]   --> 忽略所有以 .o 或 .a 结尾的文件
				*~		 --> 忽略所有以波浪符（~）结尾的文件

					# no .a files
					*.a

					# but do track lib.a, even though you're ignoring .a files above
					!lib.a

					# only ignore the TODO file in the current directory, not subdir/TODO
					/TODO

					# ignore all files in the build/ directory
					build/

					# ignore doc/notes.txt, but not doc/server/arch.txt
					doc/*.txt

					# ignore all .pdf files in the doc/ directory
					doc/**/*.pdf
					
								
	git  rm 文件名称	  --> 该文件就不再纳入版本管理了
		git rm -f		  -->  如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f,该选项会连带将本地文件一起删除。
		git rm --cached file --> 只是将文件从仓库删除，本地仍然还存在该文件。
		
			
	git mv file_from file_to 		
			
			
			
	git log 
		-p 用来显示每次提交的内容差异。
		-2 来仅显示最近两次提交
		--stat 看到每次提交的简略的统计信息
		--pretty 可以指定使用不同于默认格式的方式展示提交历史
			oneline 将每个提交放在一行显示   git log --pretty=oneline
			format 							 git log --pretty=format:"%h - %an, %ar : %s"
			format 的详细用法参考:
				https://git-scm.com/book/zh/v2/Git-基础-查看提交历史
				
			git log --pretty=format:"%h %s" --graph
			git log --since=2.weeks  --> 列出所有最近两周内的提交
			git log -Sfunction_name  --> 可以列出那些添加或移除了某些字符串的提交。 比如说，你想找出添加或移除了某一个特定函数的引用的提交
		example:
			git log -p -2
			
			
4.远程仓库的使用
	查看远程仓库:
		git remote -v  --> -v会显示需要读写远程仓库使用的Git保存的简写与其对应的URL
			git remote -v https://github.com/schacon/ticgit
			
	添加远程仓库
		git remote add pb https://github.com/paulboone/ticgit  --> 使用pb代替后面的url
		
	从远程仓库拉取:
		git fetch [remote-name]
		git fetch pb   等同于
		git fetch https://github.con/paulboone/ticgit
		
		与git clone的区别:
			1.git clone 克隆一个远程仓库,命令会自动将其添加为远程仓库并默认以 “origin” 为简写
			2.git fetch 命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作
			
	推送到远程仓库:
		git push [remote-name] [branch-name]
		
		Note:
			当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。
			你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送。
			参考:
				https://git-scm.com/book/zh/v2/Git-基础-远程仓库的使用    --> 搜索“如何推送到远程仓库服务器”
		
		解决github push错误The requested URL returned error: 403 Forbidden while accessing:
		修改.git/config文件中url地址
			示例
			[remote "origin"]
				fetch = +refs/heads/*:refs/remotes/origin/*
				url = https://github.com/zrj12345/jpush_server
				
			将url = https://github.com/zrj12345/jpush_server改为url = https://zrj12345@github.com/zrj12345/jpush_server    -->zrj12345为你在远程服务器上的用户名称。
			
	查看远程仓库:
		git remote show [remote-name]
		
		示例:
			git remote show https://gitub.com/zrj12345/jpush_server
			
	远程仓库的移除与重命名:
		git remote rename
		
		示例:
			git remote rename dd ss
	
		git remote rm [remote-url]     --> 如果因为一些原因想要移除一个远程仓库 - 你已经从服务器上搬走了或不再想使用某一个特定的镜像了，又或者某一个贡献者不再贡献了 - 可以使用 git remote rm 
		
5.撤销操作:	
	撤销操作
		git commit --amend      --> 有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了,可以使用这个命令
		使用场景:
			有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 --amend 选项的提交命令尝试重新提交：
			
		示例:
			git commit -m 'initial commit'
			$ git add forgotten_file
			$ git commit --amend
		
		Note:
			在 Git 中任何 已提交的 东西几乎总是可以恢复的。 
			
	取消暂存的文件        ---> 使用git reset
		示例:
			$ git add *
			$ git status
			On branch master
			Changes to be committed:
			  (use "git reset HEAD <file>..." to unstage)

				renamed:    README.md -> README
				modified:   CONTRIBUTING.md
			git reset CONTRIBUTING.md
	
	撤消对文件的修改:
		git checkout -- [file]
		
			
			
6.打标签	
	列出标签:
		git tag
			
	创建标签:
		轻量标签，附注标签,临时标签
		
		创建附注标签:
			git tag -a v1.4 -m 'my version 1.4'   --> -m 选项指定了一条将会存储在标签中的信息,没有指定-m，git会要求你输入信息。
			
		创建轻量标签:
			git tag v1.4-1w       --> 创建轻量标签不需要指定-m，-a选项
			
		后期打标签:
			git tag -a v1.2 9fceb02  --> 9fceb02 填写指定提交 的校验和(或者部分校验和)
			
		
		共享标签:        -->如何将标签推送到远程（共享）仓库服务器上。
			Note:
				git push 并不会将标签传送到远程仓库服务器上.
			
			git push [remote-url]  [tag-name]
			
				example:
					git push https://github.com/zrj12345/jpush_server/ v1.0    --> 假设本地创建有标签v1.0
				
			一次性推送多个标签:
				git push [remote-url] --tags
		
		检出标签:
			git checkout -b [branchname] [tagname]
				Example:
					git checkout -b version2 v2.0.0
			
			
7.别名
	git config --global alias.co checkout
	git config --global alias.br branch
	git config --global alias.ci commit
	git config --global alias.st status
			
			
			
			
8.NOTE ABOUT FAST-FORWARD
	1.简单来说就是提交到远程中心仓库的代码必须是按照时间顺序的。
	2.比如A从中心仓库拿到代码后，对文件f进行了修改。然后push到中心仓库
	3.B在A之前就拿到了中心仓库的代码，在A push成功之后也对f文件进行了修改。这个时候B也运行push命令推送代码
		Note:
			提醒你非快进方式的更新被拒绝了，需要先从中心仓库pull到最新版本，merge后再push.
			
			
			
9.从github clone 后在linux显示中文乱码的解决办法
	1.使用iconv -f gbk utf8 inputfile > outfile
	   示例:
		iconv -f gbk utf8 git_note.txt > git_note_conv.txt	
